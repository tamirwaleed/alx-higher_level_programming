Tests for module
================


Import:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Correct Class Type:
>>> tam = BaseGeometry()
>>> type(tam)
<class '7-base_geometry.BaseGeometry'>

Area Method:
>>> type(BaseGeometry.__dict__['area'])
<class 'function'>

>>> tam.__class__.area()
Traceback (most recent call last):
TypeError: area() missing 1 required positional argument: 'self'
>>> tam.area()
Traceback (most recent call last):
    raise Exception("area() is not implemented")
Exception: area() is not implemented
>>> tam.area(15)
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

Integer Validator:
>>> type(BaseGeometry.__dict__['integer_validator'])
<class 'function'>

>>> tam = BaseGeometry()
>>> tam.__class__.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'
>>> tam.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> tam.integer_validator("tamir", 4)
>>> tam.integer_validator("tamir")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> tam.integer_validator("tamir", 4, 5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given
>>> tam.integer_validator("tamir", 4.0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: tamir must be an integer
>>> tam.integer_validator("tamir", -12)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: tamir must be greater than 0
>>> tam.integer_validator("tamir", NOne)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'NOne' is not defined
>>> tam.integer_validator("tamir", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: tamir must be an integer
>>> tam.integer_validator("tamir", [1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: tamir must be an integer
>>> tam.integer_validator("tamir", True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: tamir must be an integer
>>> tam.integer_validator({"a": 1}, (1, 2))
Traceback (most recent call last):
TypeError: {'a': 1} must be an integer
